{
	"info": {
		"_postman_id": "677c525a-1e82-4636-98b5-dbf358a6aa69",
		"name": "MVP Selections API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19692123"
	},
	"item": [
		{
			"name": "Applicants",
			"item": [
				{
					"name": "All Applicants",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/selections/{{Selection.Id}}/applicants",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"selections",
								"{{Selection.Id}}",
								"applicants"
							]
						}
					},
					"response": []
				},
				{
					"name": "ScoreCards",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/selections/{{Selection.Id}}/mvptypes/{{MvpType.Id}}/applicants/scorecards",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"selections",
								"{{Selection.Id}}",
								"mvptypes",
								"{{MvpType.Id}}",
								"applicants",
								"scorecards"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Applications",
			"item": [
				{
					"name": "All Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/applications",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Applications (User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/users/{{Me.User.Id}}/applications?status=Open",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{Me.User.Id}}",
								"applications"
							],
							"query": [
								{
									"key": "status",
									"value": "Open"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Applications (Selection)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/selections/{{Selection.Id}}/applications?status=Open",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"selections",
								"{{Selection.Id}}",
								"applications"
							],
							"query": [
								{
									"key": "status",
									"value": "Open"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Applications (Country)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/countries/{{Region.Country.Id}}/applications?status=Open",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"countries",
								"{{Region.Country.Id}}",
								"applications"
							],
							"query": [
								{
									"key": "status",
									"value": "Open"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Application (400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Application.Objectives\", pm.variables.replaceIn(\"{{$randomBs}}\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"eligibility\": \"{{$randomCatchPhrase}}\",\r\n  \"objectives\": \"{{Application.Objectives}}\",\r\n  \"mentor\": \"{{$randomFullName}}\",\r\n  \"status\": \"{{Application.Status}}\",\r\n  \"mvpType\": {\r\n    \"id\": {{MvpType.Id}}\r\n  },\r\n  \"country\": {\r\n    \"id\": {{Region.Country.Id}}\r\n  },\r\n  \"links\": [\r\n    {\r\n      \"date\": \"{{$isoTimestamp}}\",\r\n      \"type\": \"{{Application.Link.Type}}\",\r\n      \"relatedProducts\": [\r\n        {\r\n          \"id\": {{Product.Id}}\r\n        }\r\n      ],\r\n      \"name\": \"{{$randomCatchPhrase}}\",\r\n      \"description\": \"{{$randomLoremParagraph}}\",\r\n      \"uri\": \"{{$randomUrl}}\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/selections/{{Selection.Id}}/applications",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"selections",
								"{{Selection.Id}}",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Selection (Setup)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Selection created matches year\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.year).to.eql(parseInt(pm.variables.get(\"Selection.Year\")));\r",
									"    pm.collectionVariables.set(\"Selection.Id\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var now = new Date();\r",
									"pm.collectionVariables.set(\"Selection.Year\", Math.floor(Math.random() * 100) + 1800);\r",
									"pm.collectionVariables.set(\"Selection.ApplicationsActive\", \"true\");\r",
									"pm.collectionVariables.set(\"Selection.ApplicationsStart\", new Date(new Date().setDate(now.getDate() - 1)).toISOString());\r",
									"pm.collectionVariables.set(\"Selection.ApplicationsEnd\", new Date(new Date().setDate(now.getDate() + 1)).toISOString());\r",
									"pm.collectionVariables.set(\"Selection.ReviewsActive\", \"true\");\r",
									"pm.collectionVariables.set(\"Selection.ReviewsStart\", new Date(new Date().setDate(now.getDate() - 1)).toISOString());\r",
									"pm.collectionVariables.set(\"Selection.ReviewsEnd\", new Date(new Date().setDate(now.getDate() + 1)).toISOString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"year\": {{Selection.Year}},\r\n  \"applicationsActive\": {{Selection.ApplicationsActive}},\r\n  \"applicationsStart\": \"{{Selection.ApplicationsStart}}\",\r\n  \"applicationsEnd\": \"{{Selection.ApplicationsEnd}}\",\r\n  \"reviewsActive\": {{Selection.ReviewsActive}},\r\n  \"reviewsStart\": \"{{Selection.ReviewsStart}}\",\r\n  \"reviewsEnd\": \"{{Selection.ReviewsEnd}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/selections",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"selections"
							]
						}
					},
					"response": []
				},
				{
					"name": "MvpType (Setup)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"MvpType.Name\", pm.variables.replaceIn(\"{{$randomJobArea}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"MvpType created matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"MvpType.Name\"));\r",
									"    pm.collectionVariables.set(\"MvpType.Id\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{MvpType.Name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/mvptypes",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"mvptypes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product (Setup)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Product.Name\", pm.variables.replaceIn(\"{{$randomProduct}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Product created matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"Product.Name\"));\r",
									"    pm.collectionVariables.set(\"Product.Id\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Product.Name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/products",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Application created matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.objectives).to.eql(pm.variables.get(\"Application.Objectives\"));\r",
									"    pm.collectionVariables.set(\"Application.Id\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Application.Objectives\", pm.variables.replaceIn(\"{{$randomBs}}\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"eligibility\": \"{{$randomCatchPhrase}}\",\r\n  \"objectives\": \"{{Application.Objectives}}\",\r\n  \"mentor\": \"{{$randomFullName}}\",\r\n  \"status\": \"{{Application.Status}}\",\r\n  \"mvpType\": {\r\n    \"id\": {{MvpType.Id}}\r\n  },\r\n  \"country\": {\r\n    \"id\": {{Region.Country.Id}}\r\n  },\r\n  \"links\": [\r\n    {\r\n      \"date\": \"{{$isoTimestamp}}\",\r\n      \"type\": \"{{Application.Link.Type}}\",\r\n      \"relatedProducts\": [\r\n        {\r\n          \"id\": {{Product.Id}}\r\n        }\r\n      ],\r\n      \"name\": \"{{$randomCatchPhrase}}\",\r\n      \"description\": \"{{$randomLoremParagraph}}\",\r\n      \"uri\": \"{{$randomUrl}}\"\r\n    }\r\n  ],\r\n  \"applicant\": {\r\n      \"id\": \"{{Application.Applicant.Id}}\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/selections/{{Selection.Id}}/applications",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"selections",
								"{{Selection.Id}}",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Application matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.objectives).to.eql(pm.variables.get(\"Application.Objectives\"));\r",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"Application.Id\"));\r",
									"    pm.expect(jsonData.mvpType.id).to.eql(pm.variables.get(\"MvpType.Id\"));\r",
									"    pm.expect(jsonData.country.id).to.eql(pm.variables.get(\"Region.Country.Id\"));\r",
									"    pm.expect(jsonData.links[0].relatedProducts[0].id).to.eql(pm.variables.get(\"Product.Id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/applications/{{Application.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"applications",
								"{{Application.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Application matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.objectives).to.eql(pm.variables.get(\"Application.Objectives\"));\r",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"Application.Id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Application.Objectives\", pm.variables.replaceIn(\"{{$randomBs}}\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"objectives\": \"{{Application.Objectives}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/applications/{{Application.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"applications",
								"{{Application.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Application (New Objectives)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Application matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.objectives).to.eql(pm.variables.get(\"Application.Objectives\"));\r",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"Application.Id\"));\r",
									"    pm.expect(jsonData.mvpType.id).to.eql(pm.variables.get(\"MvpType.Id\"));\r",
									"    pm.expect(jsonData.country.id).to.eql(pm.variables.get(\"Region.Country.Id\"));\r",
									"    pm.expect(jsonData.links[0].relatedProducts[0].id).to.eql(pm.variables.get(\"Product.Id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/applications/{{Application.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"applications",
								"{{Application.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/applications/{{Application.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"applications",
								"{{Application.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product (Cleanup)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/products/{{Product.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{Product.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "MvpType (Cleanup)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/mvptypes/{{MvpType.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"mvptypes",
								"{{MvpType.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Selection (Cleanup)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/selections/{{Selection.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"selections",
								"{{Selection.Id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "ApplicationComment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Comment created matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.value).to.eql(pm.variables.get(\"Comment.Value\"));\r",
									"    pm.collectionVariables.set(\"Comment.Id\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Comment.Value\", pm.variables.replaceIn(\"{{$randomLoremParagraph}}\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"value\": \"{{Comment.Value}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/applications/{{Application.Id}}/comments",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"applications",
								"{{Application.Id}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/comments/{{Comment.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"comments",
								"{{Comment.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Comment.Value\", pm.variables.replaceIn(\"{{$randomLoremParagraph}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Comment updated matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"Comment.Id\"));\r",
									"    pm.expect(jsonData.value).to.eql(pm.variables.get(\"Comment.Value\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"value\": \"{{Comment.Value}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/comments/{{Comment.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"comments",
								"{{Comment.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "All ApplicationComments",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/applications/{{Application.Id}}/comments",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"applications",
								"{{Application.Id}}",
								"comments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Consents",
			"item": [
				{
					"name": "All Consents (Current User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/users/current/consents",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"current",
								"consents"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Consents (User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/users/{{User.Id}}/consents",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{User.Id}}",
								"consents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consent (Current User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Consent matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(pm.variables.get(\"Consent.Type\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"{{Consent.Type}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/users/current/consents",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"current",
								"consents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consent (User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Consent matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(pm.variables.get(\"Consent.Type\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"PersonalInformation\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/users/{{User.Id}}/consents",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{User.Id}}",
								"consents"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Contributions",
			"item": [
				{
					"name": "Contribution",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Contribution.Name\", pm.variables.replaceIn(\"{{$randomLoremWords}}\"));\r",
									"pm.collectionVariables.set(\"Contribution.Description\", pm.variables.replaceIn(\"{{$randomLoremParagraph}}\"));\r",
									"pm.collectionVariables.set(\"Contribution.Uri\", pm.variables.replaceIn(\"{{$randomUrl}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Contribution created matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"Contribution.Name\"));\r",
									"    pm.expect(jsonData.description).to.eql(pm.variables.get(\"Contribution.Description\"));\r",
									"    pm.expect(jsonData.uri).to.eql(pm.variables.get(\"Contribution.Uri\"));\r",
									"    pm.collectionVariables.set(\"Contribution.Id\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Contribution.Name}}\",\r\n    \"description\": \"{{Contribution.Description}}\",\r\n    \"uri\": \"{{Contribution.Uri}}\",\r\n    \"type\": \"Other\",\r\n    \"date\": \"{{$isoTimestamp}}\",\r\n    \"relatedProducts\": [\r\n        {\r\n            \"id\": \"{{Product.Id}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/applications/{{Application.Id}}/contributions",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"applications",
								"{{Application.Id}}",
								"contributions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Contribution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/applications/{{Application.Id}}/contributions/{{Contribution.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"applications",
								"{{Application.Id}}",
								"contributions",
								"{{Contribution.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Contribution",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Contribution.Name\", pm.variables.replaceIn(\"{{$randomLoremWords}}\"));\r",
									"pm.collectionVariables.set(\"Contribution.Description\", pm.variables.replaceIn(\"{{$randomLoremParagraph}}\"));\r",
									"pm.collectionVariables.set(\"Contribution.Uri\", pm.variables.replaceIn(\"{{$randomUrl}}\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Contribution.Name}}\",\r\n    \"description\": \"{{Contribution.Description}}\",\r\n    \"uri\": \"{{Contribution.Uri}}\",\r\n    \"type\": \"Speaking\",\r\n    \"date\": \"{{$isoTimestamp}}\",\r\n    \"relatedProducts\": [\r\n        {\r\n            \"id\": \"{{Product.Id}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/contributions/{{Contribution.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"contributions",
								"{{Contribution.Id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Countries",
			"item": [
				{
					"name": "All Countries (default pageSize)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Country lists contains 100 countries (pageSize 100)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(100);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/countries",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"countries"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Countries (pageSize 300) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Country lists contains 239 countries\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(239);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/countries?ps=300",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"countries"
							],
							"query": [
								{
									"key": "ps",
									"value": "300"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "MvpTypes",
			"item": [
				{
					"name": "All MvpTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/mvptypes",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"mvptypes"
							]
						}
					},
					"response": []
				},
				{
					"name": "MvpType",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"MvpType.Name\", pm.variables.replaceIn(\"{{$randomJobArea}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"MvpType created matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"MvpType.Name\"));\r",
									"    pm.collectionVariables.set(\"MvpType.Id\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{MvpType.Name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/mvptypes",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"mvptypes"
							]
						}
					},
					"response": []
				},
				{
					"name": "MvpType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"MvpType matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"MvpType.Name\"));\r",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"MvpType.Id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/mvptypes/{{MvpType.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"mvptypes",
								"{{MvpType.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "MvpType",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"MvpType.Name\", pm.variables.replaceIn(\"{{$randomJobArea}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"MvpType name matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"MvpType.Name\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{MvpType.Name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/mvptypes/{{MvpType.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"mvptypes",
								"{{MvpType.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "MvpType (New Name)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"MvpType matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"MvpType.Name\"));\r",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"MvpType.Id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/mvptypes/{{MvpType.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"mvptypes",
								"{{MvpType.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "MvpType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/mvptypes/{{MvpType.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"mvptypes",
								"{{MvpType.Id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ProfileLinks",
			"item": [
				{
					"name": "ProfileLink",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"ProfileLink.Name\", pm.variables.replaceIn(\"{{$randomLoremWords}}\"));\r",
									"pm.collectionVariables.set(\"ProfileLink.Uri\", pm.variables.replaceIn(\"{{$randomUrl}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"ProfileLink created matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"ProfileLink.Name\"));\r",
									"    pm.expect(jsonData.uri).to.eql(pm.variables.get(\"ProfileLink.Uri\"));\r",
									"    pm.collectionVariables.set(\"ProfileLink.Id\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{ProfileLink.Name}}\",\r\n    \"uri\": \"{{ProfileLink.Uri}}\",\r\n    \"type\": \"Other\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/users/{{User.Id}}/profilelinks",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{User.Id}}",
								"profilelinks"
							]
						}
					},
					"response": []
				},
				{
					"name": "ProfileLink",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/users/{{User.Id}}/profilelinks/{{ProfileLink.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{User.Id}}",
								"profilelinks",
								"{{ProfileLink.Id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "All Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/products",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Product.Name\", pm.variables.replaceIn(\"{{$randomProduct}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Product created matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"Product.Name\"));\r",
									"    pm.collectionVariables.set(\"Product.Id\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Product.Name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/products",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Product matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"Product.Name\"));\r",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"Product.Id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/products/{{Product.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{Product.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Product.Name\", pm.variables.replaceIn(\"{{$randomProduct}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Product created matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"Product.Name\"));\r",
									"    pm.collectionVariables.set(\"Product.Id\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Product.Name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/products/{{Product.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{Product.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product (New Name)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Product matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"Product.Name\"));\r",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"Product.Id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/products/{{Product.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{Product.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/products/{{Product.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{Product.Id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Regions",
			"item": [
				{
					"name": "All Regions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result is array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.eq(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/regions",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"regions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Region",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Region.Name\", pm.variables.replaceIn(\"{{$randomLoremWord}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Region created matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"Region.Name\"));\r",
									"    pm.collectionVariables.set(\"Region.Id\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{Region.Name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/regions",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"regions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Region",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Region.Name\", pm.variables.replaceIn(\"{{$randomLoremWord}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Region name matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"Region.Name\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{Region.Name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/regions/{{Region.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"regions",
								"{{Region.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign Country",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Region.Country.Id\", Math.floor(Math.random() * 238) + 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"countryId\": {{Region.Country.Id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/regions/{{Region.Id}}/countries",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"regions",
								"{{Region.Id}}",
								"countries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Region (With Country)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Region matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"Region.Name\"));\r",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"Region.Id\"));\r",
									"});\r",
									"pm.test(\"Region has tested Country\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.countries.findIndex((country) => country.id == parseInt(pm.variables.get(\"Region.Country.Id\")))).to.gt(-1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/regions/{{Region.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"regions",
								"{{Region.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/regions/{{Region.Id}}/countries/{{Region.Country.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"regions",
								"{{Region.Id}}",
								"countries",
								"{{Region.Country.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Region (No Countries)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Region matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"Region.Name\"));\r",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"Region.Id\"));\r",
									"});\r",
									"pm.test(\"Region doesn't have tested Country\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.countries.findIndex((country) => country.id == parseInt(pm.variables.get(\"Region.Country.Id\")))).to.eql(-1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/regions/{{Region.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"regions",
								"{{Region.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Region",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/regions/{{Region.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"regions",
								"{{Region.Id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reviews",
			"item": [
				{
					"name": "Review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/reviews/{{Review.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"reviews",
								"{{Review.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Reviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/applications/{{Application.Id}}/reviews/",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"applications",
								"{{Application.Id}}",
								"reviews",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Review",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Review.Comment\", pm.variables.replaceIn(\"{{$randomLoremSentences}}\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"comment\": \"{{Review.Comment}}\",\r\n  \"status\": \"Open\",\r\n  \"categoryScores\": [\r\n    {\r\n      \"scoreCategoryId\": \"{{ScoreCategory.Content.Id}}\",\r\n      \"scoreId\": \"{{Score.Content.Id}}\"\r\n    },\r\n    {\r\n      \"scoreCategoryId\": \"{{ScoreCategory.Engagement.Id}}\",\r\n      \"scoreId\": \"{{Score.Engagement.Id}}\"\r\n    },\r\n    {\r\n      \"scoreCategoryId\": \"{{ScoreCategory.Speaking.Id}}\",\r\n      \"scoreId\": \"{{Score.Speaking.Id}}\"\r\n    },\r\n    {\r\n      \"scoreCategoryId\": \"{{ScoreCategory.Feedback.Id}}\",\r\n      \"scoreId\": \"{{Score.Feedback.Id}}\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/applications/{{Application.Id}}/reviews/",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"applications",
								"{{Application.Id}}",
								"reviews",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"comment\": \"{{Review.Comment}}\",\r\n  \"status\": \"Open\",\r\n  \"categoryScores\": [\r\n    {\r\n      \"scoreCategoryId\": \"{{ScoreCategory.Content.Id}}\",\r\n      \"scoreId\": \"{{Score.Content.Id}}\"\r\n    },\r\n    {\r\n      \"scoreCategoryId\": \"{{ScoreCategory.Engagement.Id}}\",\r\n      \"scoreId\": \"{{Score.Engagement.Id}}\"\r\n    },\r\n    {\r\n      \"scoreCategoryId\": \"{{ScoreCategory.Speaking.Id}}\",\r\n      \"scoreId\": \"{{Score.Speaking.Id}}\"\r\n    },\r\n    {\r\n      \"scoreCategoryId\": \"{{ScoreCategory.Feedback.Id}}\",\r\n      \"scoreId\": \"{{Score.Feedback.Id}}\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/reviews/{{Review.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"reviews",
								"{{Review.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/reviews/{{Review.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"reviews",
								"{{Review.Id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Roles",
			"item": [
				{
					"name": "All SystemRoles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Array is not empty (1 role is always in the system)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.be.gte(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/roles/system",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"roles",
								"system"
							]
						}
					},
					"response": []
				},
				{
					"name": "SystemRole",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"SystemRole.Name\", pm.variables.replaceIn(\"{{$randomJobType}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Role created matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"SystemRole.Name\"));\r",
									"    pm.collectionVariables.set(\"SystemRole.Id\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rights\": \"Apply, Review\",\r\n  \"name\": \"{{SystemRole.Name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/roles/system",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"roles",
								"system"
							]
						}
					},
					"response": []
				},
				{
					"name": "SystemRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Role id matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eq(pm.variables.get(\"SystemRole.Id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/roles/system/{{SystemRole.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"roles",
								"system",
								"{{SystemRole.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "All SystemRoles (Including POSTed)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"POSTed role is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.findIndex((role) => role.id == pm.variables.get(\"SystemRole.Id\"))).to.gt(-1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/roles/system",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"roles",
								"system"
							]
						}
					},
					"response": []
				},
				{
					"name": "SystemRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/roles/{{SystemRole.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"roles",
								"{{SystemRole.Id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ScoreCategories",
			"item": [
				{
					"name": "ScoreCategories",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/selections/{{Selection.Id}}/mvptypes/{{MvpType.Id}}/scorecategories",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"selections",
								"{{Selection.Id}}",
								"mvptypes",
								"{{MvpType.Id}}",
								"scorecategories"
							]
						}
					},
					"response": []
				},
				{
					"name": "ScoreCategory",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomIngverb}}\",\r\n  \"weight\": 1,\r\n  \"mvpType\": {\r\n    \"id\": {{MvpType.Id}}\r\n  },\r\n  \"selection\": {\r\n    \"id\": \"{{Selection.Id}}\"\r\n  },\r\n  \"scoreOptions\": [\r\n    {\r\n      \"id\": \"{{Score.Content.Id}}\"\r\n    },\r\n    {\r\n      \"id\": \"{{Score.Engagement.Id}}\"\r\n    },\r\n    {\r\n      \"id\": \"{{Score.Speaking.Id}}\"\r\n    },\r\n    {\r\n      \"id\": \"{{Score.Feedback.Id}}\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/selections/{{Selection.Id}}/mvptypes/{{MvpType.Id}}/scorecategories",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"selections",
								"{{Selection.Id}}",
								"mvptypes",
								"{{MvpType.Id}}",
								"scorecategories"
							]
						}
					},
					"response": []
				},
				{
					"name": "ScoreCategory",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/scorecategories/{{ScoreCategory.Content.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"scorecategories",
								"{{ScoreCategory.Content.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ScoreCategory",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomIngverb}}\",\r\n  \"weight\": 3,\r\n  \"sortRank\": 10,\r\n  \"scoreOptions\": [\r\n    {\r\n      \"id\": \"{{Score.Content.Id}}\"\r\n    },\r\n    {\r\n      \"id\": \"{{Score.Engagement.Id}}\"\r\n    },\r\n    {\r\n      \"id\": \"{{Score.Speaking.Id}}\"\r\n    },\r\n    {\r\n      \"id\": \"{{Score.Feedback.Id}}\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/scorecategories/{{ScoreCategory.Content.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"scorecategories",
								"{{ScoreCategory.Content.Id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Scores",
			"item": [
				{
					"name": "All Scores",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/scores",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"scores"
							]
						}
					},
					"response": []
				},
				{
					"name": "Score",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Delete\",\r\n    \"value\": 999\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/scores",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"scores"
							]
						}
					},
					"response": []
				},
				{
					"name": "Score",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomColor}}\",\r\n    \"value\": {{$randomInt}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/scores/{{Score.Content.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"scores",
								"{{Score.Content.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Score",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/scores/{{Score.Content.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"scores",
								"{{Score.Content.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Score",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/scores/{{Score.1.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"scores",
								"{{Score.1.Id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Selections",
			"item": [
				{
					"name": "Current Selection (Empty)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"No current selection exists\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.eq(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/selections/current",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"selections",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "Selection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Selection created matches year\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.year).to.eql(parseInt(pm.variables.get(\"Selection.Year\")));\r",
									"    pm.collectionVariables.set(\"Selection.Id\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var now = new Date();\r",
									"pm.collectionVariables.set(\"Selection.ApplicationsActive\", \"null\");\r",
									"pm.collectionVariables.set(\"Selection.ApplicationsStart\", new Date(new Date().setDate(now.getDate() - 1)).toISOString());\r",
									"pm.collectionVariables.set(\"Selection.ApplicationsEnd\", new Date(new Date().setDate(now.getDate() + 1)).toISOString());\r",
									"pm.collectionVariables.set(\"Selection.ReviewsActive\", \"null\");\r",
									"pm.collectionVariables.set(\"Selection.ReviewsStart\", new Date(new Date().setDate(now.getDate() - 1)).toISOString());\r",
									"pm.collectionVariables.set(\"Selection.ReviewsEnd\", new Date(new Date().setDate(now.getDate() + 1)).toISOString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"year\": {{Selection.Year}},\r\n  \"applicationsActive\": {{Selection.ApplicationsActive}},\r\n  \"applicationsStart\": \"{{Selection.ApplicationsStart}}\",\r\n  \"applicationsEnd\": \"{{Selection.ApplicationsEnd}}\",\r\n  \"reviewsActive\": {{Selection.ReviewsActive}},\r\n  \"reviewsStart\": \"{{Selection.ReviewsStart}}\",\r\n  \"reviewsEnd\": \"{{Selection.ReviewsEnd}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/selections",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"selections"
							]
						}
					},
					"response": []
				},
				{
					"name": "Current Selection (Created)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Selection id is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"Selection.Id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/selections/current",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"selections",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Selections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Array is not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.be.gte(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/selections",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"selections"
							]
						}
					},
					"response": []
				},
				{
					"name": "Selection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Selection updated matches id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"Selection.Id\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Selection.ApplicationsActive\", \"false\");\r",
									"pm.collectionVariables.set(\"Selection.ReviewsActive\", \"false\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"applicationsActive\": {{Selection.ApplicationsActive}},\r\n  \"reviewsActive\": {{Selection.ReviewsActive}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/selections/{{Selection.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"selections",
								"{{Selection.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Current Selection (Empty)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"No current selection exists\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.eq(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/selections/current",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"selections",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "Selection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Selection id is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"Selection.Id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/selections/{{Selection.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"selections",
								"{{Selection.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Selection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/selections/{{Selection.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"selections",
								"{{Selection.Id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Titles",
			"item": [
				{
					"name": "All Titles",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/titles",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"titles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Title created matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.mvpType.id).to.eql(pm.variables.get(\"MvpType.Id\"));\r",
									"    pm.expect(jsonData.application.id).to.eql(pm.variables.get(\"Application.Id\"));\r",
									"    pm.collectionVariables.set(\"Title.Id\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Title.Warning\", pm.variables.replaceIn(\"{{$randomPhrase}}\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"warning\": \"{{Title.Warning}}\",\r\n    \"mvpType\": {\r\n        \"id\": \"{{MvpType.Id}}\"\r\n    },\r\n    \"application\": {\r\n        \"id\": \"{{Application.Id}}\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/titles",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"titles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Title",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Title.Warning\", pm.variables.replaceIn(\"{{$randomPhrase}}\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"warning\": \"{{Title.Warning}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/titles/{{Title.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"titles",
								"{{Title.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/titles/{{Title.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"titles",
								"{{Title.Id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Current User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"User is Token user\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.identifier).to.eql(pm.variables.get(\"Me.User.Identifier\"));\r",
									"    pm.collectionVariables.set(\"Me.User.Id\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/users/current",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Array is not empty (1 user is always in the system)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.be.gte(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/users",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"User id is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"Me.User.Id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/users/{{Me.User.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{Me.User.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"User.Country.Id\", Math.floor(Math.random() * 238) + 1);\r",
									"pm.collectionVariables.set(\"User.Name\", pm.variables.replaceIn(\"{{$randomFullName}}\"));\r",
									"pm.collectionVariables.set(\"User.Email\", pm.variables.replaceIn(\"{{$randomEmail}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"User name, email and country matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"User.Name\"));\r",
									"    pm.expect(jsonData.email).to.eql(pm.variables.get(\"User.Email\"));\r",
									"    pm.expect(jsonData.country.id).to.eql(pm.variables.get(\"User.Country.Id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{User.Name}}\",\r\n    \"email\": \"{{User.Email}}\",\r\n    \"country\": {\r\n        \"id\": {{User.Country.Id}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/users/{{Me.User.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{Me.User.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Reset",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"User name, email and country matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"Me.User.Name\"));\r",
									"    pm.expect(jsonData.email).to.eql(pm.variables.get(\"Me.User.Email\"));\r",
									"    pm.expect(jsonData.country.id).to.eql(pm.variables.get(\"Me.User.Country.Id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Me.User.Name}}\",\r\n    \"email\": \"{{Me.User.Email}}\",\r\n    \"country\": {\r\n        \"id\": {{Me.User.Country.Id}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/users/{{Me.User.Id}}",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{Me.User.Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Current User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"User name, email and country matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"Me.User.Name\"));\r",
									"    pm.expect(jsonData.email).to.eql(pm.variables.get(\"Me.User.Email\"));\r",
									"    pm.expect(jsonData.country.id).to.eql(pm.variables.get(\"Me.User.Country.Id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Me.User.Name}}\",\r\n    \"email\": \"{{Me.User.Email}}\",\r\n    \"country\": {\r\n        \"id\": {{Me.User.Country.Id}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/v1/users/current",
							"protocol": "{{EndpointScheme}}",
							"host": [
								"{{EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Okta",
			"item": [
				{
					"name": "Introspect Token",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "",
									"type": "text"
								},
								{
									"key": "token_type_hint",
									"value": "id_token",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{Okta.ClientId}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{Okta.ClientSecret}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{Okta.EndpointUri}}/oauth2/default/v1/introspect",
							"protocol": "https",
							"host": [
								"{{Okta.EndpointUri}}"
							],
							"path": [
								"oauth2",
								"default",
								"v1",
								"introspect"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{Okta.EndpointUri}}/oauth2/default/v1/userinfo",
							"protocol": "https",
							"host": [
								"{{Okta.EndpointUri}}"
							],
							"path": [
								"oauth2",
								"default",
								"v1",
								"userinfo"
							]
						}
					},
					"response": []
				},
				{
					"name": "My User",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "SSWS ",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Cookie",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://{{Okta.EndpointUri}}/api/v1/users/{{Me.User.Identifier}}",
							"protocol": "https",
							"host": [
								"{{Okta.EndpointUri}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{Me.User.Identifier}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJraWQiOiIzZDcxOUluMGZ0WmtTNk9SM3lxNEJJNUNCTmJYdE9Mb3E2M1dYUXhkM1hnIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULnVVQ3RtbkdMU1FQTnJqNUJVZEY5MnlyNkRBaU9JQ3NlN29FODh1S3RvT00iLCJpc3MiOiJodHRwczovL2V4dGVybmFsc2l0ZWNvcmUub2t0YXByZXZpZXcuY29tL29hdXRoMi9kZWZhdWx0IiwiYXVkIjoiYXBpOi8vZGVmYXVsdCIsImlhdCI6MTY2NDM1ODgxMCwiZXhwIjoxNjY0MzYyNDEwLCJjaWQiOiIwb2ExMXd0NjhhMkFMRlVCMjBoOCIsInVpZCI6IjAwdXF5dTVieGNmZm1IM3hQMGg3Iiwic2NwIjpbIm9wZW5pZCIsInByb2ZpbGUiLCJlbWFpbCJdLCJhdXRoX3RpbWUiOjE2NjQzNTg3OTUsInN1YiI6Iml2YW4ubGllY2tlbnNAc2l0ZWNvcmUuY29tIn0.Q_d8SdV0OmIe1Yd7W8K4gh096RwH0lHr6Ak1nw2aCx0ZPRm3udlSjIWnLLkkMD-B9Jl7dPvQ0zG4l5IJggNVlYWwXKUyBzIvRBN5ZsyPamdjQsh5Ole7MJTyg4OD5_yhGikWwXzJ9htVaO1XZ5u_-LYoZrwWhojxc17LMAymCp6_tcEbm5-_Tm03mPI____-pdJNDmDFCqTLOpTBm8EafWDkAZEOu5LtzyXxpDjR6jffW-fz98JL4kbzZbpzDGTIaaIC3TnAelNadqiZGRGqXmtnerpoW4M-mNSZde1lcQeZSCYv8s4DM5M0jIaqXJvwfY_CMq3dveyU1UGOxPhKVQ",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Open API Document",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/openapi/V3.json",
					"protocol": "{{EndpointScheme}}",
					"host": [
						"{{EndpointUri}}"
					],
					"path": [
						"api",
						"openapi",
						"V3.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Status",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/status",
					"protocol": "{{EndpointScheme}}",
					"host": [
						"{{EndpointUri}}"
					],
					"path": [
						"api",
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Init",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{EndpointScheme}}://{{EndpointUri}}/api/init?code={{MasterKey}}",
					"protocol": "{{EndpointScheme}}",
					"host": [
						"{{EndpointUri}}"
					],
					"path": [
						"api",
						"init"
					],
					"query": [
						{
							"key": "code",
							"value": "{{MasterKey}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJraWQiOiJyRGFzbDVMU2hNUVNxWWRqelM1VVc4U3BNSGI1cGtxTTdNYVNJdHNXSnBVIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwMHVxeXU1YnhjZmZtSDN4UDBoNyIsIm5hbWUiOiJJdmFuIExpZWNrZW5zIiwiZW1haWwiOiJpdmFuLmxpZWNrZW5zQHNpdGVjb3JlLmNvbSIsInZlciI6MSwiaXNzIjoiaHR0cHM6Ly9leHRlcm5hbHNpdGVjb3JlLm9rdGFwcmV2aWV3LmNvbS9vYXV0aDIvZGVmYXVsdCIsImF1ZCI6IjBvYTExd3Q2OGEyQUxGVUIyMGg4IiwiaWF0IjoxNjcyODY1Nzk1LCJleHAiOjE2NzI4NjkzOTUsImp0aSI6IklELkEwZm92YnhKZmE3VjUyeHJxSUtuT0tuclFzMmxwT0N1RFo1VVdYbUsxcTgiLCJhbXIiOlsibWZhIiwicHdkIiwib3RwIl0sImlkcCI6IjAwb2kxZDhhMTkyd1gyU1FyMGg3Iiwibm9uY2UiOiI2MzgwODQ2MjU3MDY0MzM0MzguT0RGak1XTTVOalF0TVRobFpTMDBZVGt5TFRsa1pUSXROVE0wTTJJd1lXRTJNemt3WlRjeFptUTJOelV0TURJME5pMDBabU0zTFdFMFpqUXRNekJtT1RsbE1tUmpaVEJsIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiaXZhbi5saWVja2Vuc0BzaXRlY29yZS5jb20iLCJhdXRoX3RpbWUiOjE2NzI4NjU3ODQsImF0X2hhc2giOiJMd2RuLXNBSnVCTGRhZmVwN2sxSTBnIiwiZXh0ZXJuYWxVc2VySWQiOiIwMHVxeXU1YnhjZmZtSDN4UDBoNyJ9.bDB6c4V51zas4wvOSuTKYoLObjcdn-9fwK0ioIf9DNdlJSnqiAjR2B23yzQu1O3usWLFwUFAqbJc9D9N__Tszx6kv560USE_T-E-oF6MNtEjvoq0jFlF6VhgUh0NY2_pTcUuZ2OfO8opgRa9lGpqFe5qggH0AzwYp3AIqm9You1tCDZZpKrphNEh-opngGiTF2WKo4jKJkiUSHJKOJmqAVtPmxEVyBNMcE7PiHhritb2TxoF_5sLzSv-TY4ttXFxpgy17B2MKdB79pxm91E4HtpXI2Kh4BoOnCYaUR1UvK6x4ITt4Vw53kl2A7zO5XqomZMViCclsn_8lGm6iiDF9A",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Me.User.Identifier",
			"value": "00uqyu5bxcffmH3xP0h7",
			"type": "string"
		},
		{
			"key": "Me.User.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "Me.User.Country.Id",
			"value": "21",
			"type": "string"
		},
		{
			"key": "Me.User.Name",
			"value": "Ivan Lieckens",
			"type": "string"
		},
		{
			"key": "Me.User.Email",
			"value": "ivan.lieckens@sitecore.com",
			"type": "string"
		},
		{
			"key": "Selection.Year",
			"value": "2023",
			"type": "string"
		},
		{
			"key": "Selection.ApplicationsActive",
			"value": "",
			"type": "string"
		},
		{
			"key": "Selection.ApplicationsStart",
			"value": "",
			"type": "string"
		},
		{
			"key": "Selection.ApplicationsEnd",
			"value": "",
			"type": "string"
		},
		{
			"key": "Selection.ReviewsActive",
			"value": "",
			"type": "string"
		},
		{
			"key": "Selection.ReviewsStart",
			"value": "",
			"type": "string"
		},
		{
			"key": "Selection.ReviewsEnd",
			"value": "",
			"type": "string"
		},
		{
			"key": "Selection.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "Region.Name",
			"value": "",
			"type": "string"
		},
		{
			"key": "Region.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "Region.Country.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "SystemRole.Name",
			"value": "",
			"type": "string"
		},
		{
			"key": "SystemRole.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "MvpType.Name",
			"value": "",
			"type": "string"
		},
		{
			"key": "MvpType.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "Product.Name",
			"value": "",
			"type": "string"
		},
		{
			"key": "Product.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "Application.Status",
			"value": "Open",
			"type": "string"
		},
		{
			"key": "Application.Link.Type",
			"value": "BlogPost",
			"type": "string"
		},
		{
			"key": "Application.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "Application.Objectives",
			"value": "",
			"type": "string"
		},
		{
			"key": "Application.Applicant.Id",
			"value": "00000000-0000-0000-0000-000000000001",
			"type": "string"
		},
		{
			"key": "User.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "User.Name",
			"value": "",
			"type": "string"
		},
		{
			"key": "User.Email",
			"value": "",
			"type": "string"
		},
		{
			"key": "User.Country.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "Consent.Type",
			"value": "PersonalInformation",
			"type": "string"
		},
		{
			"key": "Contribution.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "Contribution.Name",
			"value": "",
			"type": "string"
		},
		{
			"key": "Contribution.Description",
			"value": "",
			"type": "string"
		},
		{
			"key": "Contribution.Uri",
			"value": "",
			"type": "string"
		},
		{
			"key": "ProfileLink.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "ProfileLink.Name",
			"value": "",
			"type": "string"
		},
		{
			"key": "ProfileLink.Uri",
			"value": "",
			"type": "string"
		},
		{
			"key": "Review.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "ScoreCategory.Content.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "Score.Content.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "ScoreCategory.Engagement.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "Score.Engagement.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "ScoreCategory.Speaking.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "Score.Speaking.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "ScoreCategory.Feedback.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "Score.Feedback.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "Review.Comment",
			"value": ""
		},
		{
			"key": "Score.1.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "Score.2.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "Score.3.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "Score.4.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "Score.5.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "Comment.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "Comment.Value",
			"value": "",
			"type": "string"
		},
		{
			"key": "Title.Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "Title.Warning",
			"value": "",
			"type": "string"
		}
	]
}